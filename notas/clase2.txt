CREAR EL PROYECTO DE LA CLASE 2
ng new clase02
css
NO ServerSRender

Estructura del proyecto:
ng g c pages/bienvenida

ðŸ“Œ CICLO DE VIDA DE UN COMPONENTE
- Es la serie de pasos que Angular ejecuta automÃ¡ticamente desde que el componente se crea, se actualiza, y finalmente se destruye.
- En cada una de esas etapas, Angular llama a mÃ©todos especiales llamados hooks (ganchos), si tu componente los implementa.

ðŸ“‹ Ciclo de Vida mÃ¡s comÃºn (simplificado)
1. constructor() â€” Se ejecuta al crear la instancia de la clase (no accede aÃºn al HTML).
2. ngOnChanges() â€” Se ejecuta cuando cambian los inputs del componente (si hay @Input()).
3. ngOnInit() â€” Se ejecuta una sola vez, cuando Angular ya terminÃ³ de inicializar el componente.
4. ngDoCheck() â€” Se ejecuta cuando Angular verifica cambios (ciclo de detecciÃ³n).
5. ngAfterContentInit() â€” Se ejecuta despuÃ©s de que el contenido del componente ha sido inicializado.
5. ngOnDestroy() â€” Se ejecuta antes de destruir el componente, ideal para limpiar timers, subscripciones, etc.
ðŸ› IMPORTANTE: Angular recomienda que ESTOS METODOS SE USEN IMPLEMENTANDO LA *INTERFACE* CORRESPONDIENTE. AsÃ­ ts nos avisara si olvidamos escribir dicho mÃ©todo.
- Los mas usados serian: OnInit y OnDestroy.

NO OLVIDAR: en los siguientes archivos:
- app.component.ts: agregar RouterLink en imports
- app.routes.ts: agregar la ruta de los nuevos componentes generados

* LOS CORCHETES SOLO HACEN FALTA CUANDO QUEREMOS REFERENCIAR VARIABLES
* LO MAS COMUN ES QUE EL COMPONENTE PADRE SEA UNA RUTA y los componentes hijos estÃ©n instanciados dentro de la ruta.
* Al usar input, en el HTML tengo que cambiar la variable a mÃ©todo. Ejemplo: "imagen" cambia a "imagen()"

script:
<app-card></app-card>
<app-card texto="esto se va a poner feo" imagen="img2.jpg"></app-card>
<app-card texto="no me quemes" imagen="img3.jpg"></app-card>


ðŸ“Œ Una DIRECTIVA es una intruccion que le dice a Angular como debe comportarse un elemento del DOM o un componente.

Tipos de directivas:
- Estructural: cambian el diseÃ±o del DOM, por ejemplo, agregar o quitar elementos. *ngIf, *ngFor, *ngSwitch
- Atributo: cambian la apariencia o comportamiento de un elemento existente. ngClass, ngStyle
- Personalizada: Comportamiento definido por nosotros.

ðŸ“Œ RECORDATORIOS
âœ… 1. InputSignal se importa de @angular/core
script: import { Component, InputSignal, input } from '@angular/core';
InputSignal una versiÃ³n reactiva de @Input(), basada en Signals

âœ… 2. Signal vs InputSignal
- Signal: Estado interno local, vive y muere en el mismo componente.
- InputSignal: Estado que recibÃ­s, depende de otro componente.

---------------------------------------------------------------

TAREA - Input y Output
1. Crear un proyecto vacÃ­o.
2. Crear las pages: Login, Bienvenida, Error, Autos y sus respectivas rutas en el router.
3. Buscar en internet plantillas HTML, para login, bienvenida y error.
Nota tambiÃ©n pueden hacer la suya propia, pero no recomiendo que usen su tiempo en eso.
Links de paginas que tienen ejemplos:
- https://getbootstrap.com/docs/5.3/examples
- https://plantillashtmlgratis.com
- https://cssauthor.com/html5-and-css3-login-forms/
4. Crear los componentes: alta-auto, listado-auto, detalle-auto.
5. Hacer los componentes del punto 4 hijos de la page Auto.
6. Crear la clase Auto, la cual cuenta con los atributos:
- marca:string, modelo:string, precio:number
7. En la page Auto crear un array de Autos.
8. El componente alta-auto posee los inputs para cargar un auto y un output para enviarlo al componente padre.
9. El componente listado-auto muestra el listado de autos por input.
10. El componente listado-auto envia por output un auto seleccionado. Nota: agregar un botÃ³n a cada elemento del @for.
11. La page Auto recibe el auto seleccionado y lo envia al componente detalle-auto.
12. El componente detalle-auto muestra el auto seleccionado del listado.
13. El componente listado-auto posee un botÃ³n para eliminar el auto seleccionado del array ubicado en el componente padre (output)